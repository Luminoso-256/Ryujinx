From eedc279993ef873d0fd4310e025d1f75bbfe8a89 Mon Sep 17 00:00:00 2001
From: Luminoso-256 <63971285+Luminoso-256@users.noreply.github.com>
Date: Mon, 19 Jul 2021 11:20:22 -0500
Subject: [PATCH] Other random services.

---
 .../ILibraryAppletSelfAccessor.cs             | 29 ++++++--
 .../SystemAppletProxy/ICommonStateGetter.cs   | 10 +++
 .../IAllSystemAppletProxiesService.cs         |  7 ++
 .../Services/Am/AppletAE/IApplicationProxy.cs | 70 +++++++++++++++++++
 .../NvHostAsGpu/NvHostAsGpuDeviceFile.cs      |  1 +
 .../NvHostChannel/NvHostGpuDeviceFile.cs      | 23 +++++-
 6 files changed, 133 insertions(+), 7 deletions(-)
 create mode 100644 Ryujinx.HLE/HOS/Services/Am/AppletAE/IApplicationProxy.cs

diff --git a/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/LibraryAppletProxy/ILibraryAppletSelfAccessor.cs b/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/LibraryAppletProxy/ILibraryAppletSelfAccessor.cs
index 00081e1b..50c4b32d 100644
--- a/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/LibraryAppletProxy/ILibraryAppletSelfAccessor.cs
+++ b/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/LibraryAppletProxy/ILibraryAppletSelfAccessor.cs
@@ -23,6 +23,17 @@ namespace Ryujinx.HLE.HOS.Services.Am.AppletAE.AllSystemAppletProxiesService.Lib
 
                 _appletStandalone.InputData.Enqueue(miiEditInputData);
             }
+            else if (context.Device.Application.TitleId == 0x010000000000100D)
+            {
+                _appletStandalone = new AppletStandalone() {
+                    AppletId = AppletId.PhotoViewer,
+                    LibraryAppletMode = LibraryAppletMode.AllForeground
+                };
+                byte[] miiEditInputData = new byte[0x100];
+                miiEditInputData[0] = 0x03; // Hardcoded unknown value.
+
+                _appletStandalone.InputData.Enqueue(miiEditInputData);
+            }
             else
             {
                 throw new NotImplementedException($"{context.Device.Application.TitleId} applet is not implemented.");
@@ -33,16 +44,22 @@ namespace Ryujinx.HLE.HOS.Services.Am.AppletAE.AllSystemAppletProxiesService.Lib
         // PopInData() -> object<nn::am::service::IStorage>
         public ResultCode PopInData(ServiceCtx context)
         {
-            byte[] appletData = _appletStandalone.InputData.Dequeue();
+            try
+            {
+                byte[] appletData = _appletStandalone.InputData.Dequeue();
+                if (appletData.Length == 0)
+                {
+                    return ResultCode.NotAvailable;
+                }
 
-            if (appletData.Length == 0)
+                MakeObject(context, new IStorage(appletData));
+
+                return ResultCode.Success;
+            }
+            catch(Exception e)
             {
                 return ResultCode.NotAvailable;
             }
-
-            MakeObject(context, new IStorage(appletData));
-
-            return ResultCode.Success;
         }
 
         [CommandHipc(11)]
diff --git a/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/SystemAppletProxy/ICommonStateGetter.cs b/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/SystemAppletProxy/ICommonStateGetter.cs
index dec1763a..176d0ba3 100644
--- a/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/SystemAppletProxy/ICommonStateGetter.cs
+++ b/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/SystemAppletProxy/ICommonStateGetter.cs
@@ -141,6 +141,16 @@ namespace Ryujinx.HLE.HOS.Services.Am.AppletAE.AllSystemAppletProxiesService.Sys
             return ResultCode.Success;
         }
 
+        [CommandHipc(40)]
+        public ResultCode GetCradleFwVersion(ServiceCtx context)
+        {
+            context.ResponseData.Write(Convert.ToUInt32(0));
+            context.ResponseData.Write(Convert.ToUInt32(0));
+            context.ResponseData.Write(Convert.ToUInt32(0));
+            context.ResponseData.Write(Convert.ToUInt32(0));
+            return ResultCode.Success;
+        }
+
         [CommandHipc(50)] // 3.0.0+
         // IsVrModeEnabled() -> b8
         public ResultCode IsVrModeEnabled(ServiceCtx context)
diff --git a/Ryujinx.HLE/HOS/Services/Am/AppletAE/IAllSystemAppletProxiesService.cs b/Ryujinx.HLE/HOS/Services/Am/AppletAE/IAllSystemAppletProxiesService.cs
index 9de09dcb..5a03a268 100644
--- a/Ryujinx.HLE/HOS/Services/Am/AppletAE/IAllSystemAppletProxiesService.cs
+++ b/Ryujinx.HLE/HOS/Services/Am/AppletAE/IAllSystemAppletProxiesService.cs
@@ -33,5 +33,12 @@ namespace Ryujinx.HLE.HOS.Services.Am.AppletAE
 
             return ResultCode.Success;
         }
+
+        [CommandHipc(350)]
+        public ResultCode OpenSystemApplicationProxy(ServiceCtx context)
+        {
+            MakeObject(context, new IApplicationProxy(context.Request.HandleDesc.PId));
+            return ResultCode.Success;
+        }
     }
 }
\ No newline at end of file
diff --git a/Ryujinx.HLE/HOS/Services/Am/AppletAE/IApplicationProxy.cs b/Ryujinx.HLE/HOS/Services/Am/AppletAE/IApplicationProxy.cs
new file mode 100644
index 00000000..1c5bb551
--- /dev/null
+++ b/Ryujinx.HLE/HOS/Services/Am/AppletAE/IApplicationProxy.cs
@@ -0,0 +1,70 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Ryujinx.HLE.HOS.Services.Am.AppletAE
+{
+    class IApplicationProxy : IpcService
+    {
+        private readonly long _pid;
+
+        public IApplicationProxy(long pid)
+        {
+            _pid = pid;
+        }
+
+        [CommandHipc(0)]
+        public ResultCode GetCommonStateGetter(ServiceCtx context)
+        {
+            MakeObject(context, new AppletAE.AllSystemAppletProxiesService.SystemAppletProxy.ICommonStateGetter(context));
+            return ResultCode.Success;
+        }
+        [CommandHipc(1)]
+        public ResultCode GetSelfController(ServiceCtx context)
+        {
+            MakeObject(context, new AppletAE.AllSystemAppletProxiesService.SystemAppletProxy.ICommonStateGetter(context));
+            return ResultCode.Success;
+        }
+        [CommandHipc(2)]
+        public ResultCode GetWindowController(ServiceCtx context)
+        {
+            MakeObject(context, new AppletAE.AllSystemAppletProxiesService.SystemAppletProxy.IWindowController(_pid));
+            return ResultCode.Success;
+        }
+        [CommandHipc(3)]
+        public ResultCode GetAudioController(ServiceCtx context)
+        {
+            MakeObject(context, new AppletAE.AllSystemAppletProxiesService.SystemAppletProxy.IAudioController());
+            return ResultCode.Success;
+        }
+        [CommandHipc(4)]
+        public ResultCode GetDisplayController(ServiceCtx context)
+        {
+            MakeObject(context, new AppletAE.AllSystemAppletProxiesService.SystemAppletProxy.IDisplayController(context));
+            return ResultCode.Success;
+        }
+    
+        [CommandHipc(1000)]
+        public ResultCode GetDebugFunctions(ServiceCtx context)
+        {
+            MakeObject(context, new AppletAE.AllSystemAppletProxiesService.SystemAppletProxy.IDebugFunctions());
+            return ResultCode.Success; 
+        }
+
+        [CommandHipc(20)]
+        public ResultCode GetApplicationFunctions(ServiceCtx context)
+        {
+            MakeObject(context, new AppletOE.ApplicationProxyService.ApplicationProxy.IApplicationFunctions(context.Device.System));
+            return ResultCode.Success;
+        }
+        
+        [CommandHipc(11)]
+        public ResultCode GetLibraryAppletCreator(ServiceCtx context)
+        {
+            MakeObject(context, new AllSystemAppletProxiesService.SystemAppletProxy.ILibraryAppletCreator());
+            return ResultCode.Success;
+        }
+    }
+}
diff --git a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/NvHostAsGpuDeviceFile.cs b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/NvHostAsGpuDeviceFile.cs
index 4bdfdf51..29bb44a4 100644
--- a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/NvHostAsGpuDeviceFile.cs
+++ b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/NvHostAsGpuDeviceFile.cs
@@ -44,6 +44,7 @@ namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvHostAsGpu
                         break;
                     case 0x07:
                         Logger.Info?.Print(LogClass.ServiceNv, $"Number 0x07 triggered");
+                        result = NvInternalResult.Success;
                         break;
                     case 0x08:
                         result = CallIoctlMethod<GetVaRegionsArguments>(GetVaRegions, arguments);
diff --git a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostChannel/NvHostGpuDeviceFile.cs b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostChannel/NvHostGpuDeviceFile.cs
index f27c065e..cd33eb79 100644
--- a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostChannel/NvHostGpuDeviceFile.cs
+++ b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostChannel/NvHostGpuDeviceFile.cs
@@ -1,4 +1,5 @@
-﻿using Ryujinx.HLE.HOS.Kernel.Common;
+﻿using Ryujinx.Common.Logging;
+using Ryujinx.HLE.HOS.Kernel.Common;
 using Ryujinx.HLE.HOS.Kernel.Threading;
 using Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvHostChannel.Types;
 using Ryujinx.Memory;
@@ -30,12 +31,31 @@ namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvHostChannel
                     case 0x1b:
                         result = CallIoctlMethod<SubmitGpfifoArguments, ulong>(SubmitGpfifoEx, arguments, inlineInBuffer);
                         break;
+                    case 0x05:
+                        Logger.Stub?.Print(LogClass.ServiceNv, "Stubbed NvHostGpuDeviceFile.Ioctl2, Control code 0x05");
+                        result = NvInternalResult.Success;
+                        break;
                 }
             }
 
             return result;
         }
 
+        public override NvInternalResult Ioctl(NvIoctl command, Span<byte> arguments)
+        {
+            NvInternalResult result = NvInternalResult.NotImplemented;
+
+            switch (command.Number)
+            {
+                default:
+                    Logger.Stub?.Print(LogClass.ServiceNv, $"Auto-stubbing code {command.Number} in NvHostGpuDeviceFile.Ioctl");
+                    result = NvInternalResult.Success;
+                    break;
+            }
+
+            return result;
+        }
+
         public override NvInternalResult QueryEvent(out int eventHandle, uint eventId)
         {
             // TODO: accurately represent and implement those events.
@@ -52,6 +72,7 @@ namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvHostChannel
                 case 0x3:
                     targetEvent = _errorNotifierEvent;
                     break;
+
             }
 
             if (targetEvent != null)
-- 
2.35.1.windows.2

