From 9f7b0d7e1bd3a70e7d14344e21152cefa8a48c3f Mon Sep 17 00:00:00 2001
From: Luminoso-256 <63971285+Luminoso-256@users.noreply.github.com>
Date: Mon, 19 Jul 2021 09:34:33 -0500
Subject: [PATCH 1/2] A smattering of random bad practices/stubs with the goal
 of getting some unorthodox stuff to run

---
 .idea/.idea.Ryujinx/.idea/.gitignore          |  8 +++++
 .idea/.idea.Ryujinx/.idea/encodings.xml       |  4 +++
 .idea/.idea.Ryujinx/.idea/indexLayout.xml     |  8 +++++
 .idea/.idea.Ryujinx/.idea/vcs.xml             |  6 ++++
 Ryujinx.Graphics.Gpu/Image/Texture.cs         |  3 +-
 Ryujinx.HLE/HOS/Horizon.cs                    |  6 ++++
 .../SystemAppletProxy/ICommonStateGetter.cs   | 25 +++++++++++++++
 .../IAllSystemAppletProxiesService.cs         |  8 +++++
 .../ApplicationProxy/IApplicationFunctions.cs | 14 ++++++++
 Ryujinx.HLE/HOS/Services/Fatal/IService.cs    |  8 +++++
 Ryujinx.HLE/HOS/Services/IpcService.cs        | 12 +++++--
 .../Nifm/StaticService/IGeneralService.cs     |  7 ++++
 Ryujinx.HLE/HOS/Services/Nn/gpio/IManager.cs  | 17 ++++++++++
 Ryujinx.HLE/HOS/Services/Npns/INpnsSystem.cs  |  7 ++++
 .../Ns/IApplicationManagerInterface.cs        | 32 +++++++++++++++++++
 .../Ns/IContentManagementInterface.cs         | 20 ++++++++++++
 .../Services/Ns/IServiceGetterInterface.cs    |  7 ++++
 Ryujinx.HLE/HOS/Services/Nv/INvDrvServices.cs |  7 ++--
 .../Services/Nv/NvDrvServices/NvDeviceFile.cs |  2 +-
 .../NvHostAsGpu/NvHostAsGpuDeviceFile.cs      | 13 ++++++++
 .../NvHostAsGpu/Types/AllocASArguments.cs     | 18 +++++++++++
 .../NvHostCtrl/NvHostCtrlDeviceFile.cs        |  1 +
 .../NvHostCtrlGpu/NvHostCtrlGpuDeviceFile.cs  |  2 ++
 .../Nv/NvDrvServices/NvMap/NvMapDeviceFile.cs |  1 +
 .../HOS/Services/Prepo/IPrepoService.cs       | 14 ++++++++
 .../HOS/Services/Ptm/Fan/IController.cs       | 12 +++++++
 Ryujinx.HLE/HOS/Services/Ptm/Fan/IManager.cs  |  8 +++++
 .../HOS/Services/Ptm/Psm/IPsmServer.cs        |  7 ++++
 Ryujinx.HLE/HOS/Services/Ptm/Tc/IManager.cs   |  7 ++++
 .../Settings/IFactorySettingsServer.cs        |  7 ++++
 .../HOS/Services/Settings/ISettingsServer.cs  |  2 ++
 .../Settings/ISystemSettingsServer.cs         | 20 ++++++++++++
 .../HOS/Services/Settings/NxSettings.cs       |  1 +
 33 files changed, 308 insertions(+), 6 deletions(-)
 create mode 100644 .idea/.idea.Ryujinx/.idea/.gitignore
 create mode 100644 .idea/.idea.Ryujinx/.idea/encodings.xml
 create mode 100644 .idea/.idea.Ryujinx/.idea/indexLayout.xml
 create mode 100644 .idea/.idea.Ryujinx/.idea/vcs.xml
 create mode 100644 Ryujinx.HLE/HOS/Services/Nn/gpio/IManager.cs
 create mode 100644 Ryujinx.HLE/HOS/Services/Ns/IContentManagementInterface.cs
 create mode 100644 Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/Types/AllocASArguments.cs
 create mode 100644 Ryujinx.HLE/HOS/Services/Ptm/Fan/IController.cs

diff --git a/.idea/.idea.Ryujinx/.idea/.gitignore b/.idea/.idea.Ryujinx/.idea/.gitignore
new file mode 100644
index 00000000..7fd5e804
--- /dev/null
+++ b/.idea/.idea.Ryujinx/.idea/.gitignore
@@ -0,0 +1,8 @@
+ï»¿# Default ignored files
+/shelf/
+/workspace.xml
+# Rider ignored files
+/modules.xml
+/.idea.Ryujinx.iml
+/contentModel.xml
+/projectSettingsUpdater.xml
diff --git a/.idea/.idea.Ryujinx/.idea/encodings.xml b/.idea/.idea.Ryujinx/.idea/encodings.xml
new file mode 100644
index 00000000..df87cf95
--- /dev/null
+++ b/.idea/.idea.Ryujinx/.idea/encodings.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding" addBOMForNewFiles="with BOM under Windows, with no BOM otherwise" />
+</project>
\ No newline at end of file
diff --git a/.idea/.idea.Ryujinx/.idea/indexLayout.xml b/.idea/.idea.Ryujinx/.idea/indexLayout.xml
new file mode 100644
index 00000000..7b08163c
--- /dev/null
+++ b/.idea/.idea.Ryujinx/.idea/indexLayout.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="UserContentModel">
+    <attachedFolders />
+    <explicitIncludes />
+    <explicitExcludes />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/.idea.Ryujinx/.idea/vcs.xml b/.idea/.idea.Ryujinx/.idea/vcs.xml
new file mode 100644
index 00000000..94a25f7f
--- /dev/null
+++ b/.idea/.idea.Ryujinx/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/Ryujinx.Graphics.Gpu/Image/Texture.cs b/Ryujinx.Graphics.Gpu/Image/Texture.cs
index c9bff561..ab9cf21c 100644
--- a/Ryujinx.Graphics.Gpu/Image/Texture.cs
+++ b/Ryujinx.Graphics.Gpu/Image/Texture.cs
@@ -1327,7 +1327,8 @@ namespace Ryujinx.Graphics.Gpu.Image
                     return _referenceCount <= 0;
                 }
 
-                Debug.Assert(references == 1);
+                //You annoy me.
+                //Debug.Assert(references == 1);
             }
 
             return DecrementReferenceCount();
diff --git a/Ryujinx.HLE/HOS/Horizon.cs b/Ryujinx.HLE/HOS/Horizon.cs
index 916ed797..cf27916c 100644
--- a/Ryujinx.HLE/HOS/Horizon.cs
+++ b/Ryujinx.HLE/HOS/Horizon.cs
@@ -96,6 +96,7 @@ namespace Ryujinx.HLE.HOS
         internal KEvent VsyncEvent { get; private set; }
 
         internal KEvent DisplayResolutionChangeEvent { get; private set; }
+        internal KEvent AquireSleeplockEvent { get; private set; }
 
         public Keyset KeySet => Device.FileSystem.KeySet;
 
@@ -179,6 +180,7 @@ namespace Ryujinx.HLE.HOS
             VsyncEvent = new KEvent(KernelContext);
 
             DisplayResolutionChangeEvent = new KEvent(KernelContext);
+            AquireSleeplockEvent = new KEvent(KernelContext);
 
             AccountManager = device.Configuration.AccountManager;
             ContentManager = device.Configuration.ContentManager;
@@ -382,6 +384,10 @@ namespace Ryujinx.HLE.HOS
         {
             DisplayResolutionChangeEvent.ReadableEvent.Signal();
         }
+        public void SignalAquireSleeplockEvent()
+        {
+            AquireSleeplockEvent.ReadableEvent.Signal();
+        }
 
         public void SignalVsync()
         {
diff --git a/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/SystemAppletProxy/ICommonStateGetter.cs b/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/SystemAppletProxy/ICommonStateGetter.cs
index 4c862dd6..dec1763a 100644
--- a/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/SystemAppletProxy/ICommonStateGetter.cs
+++ b/Ryujinx.HLE/HOS/Services/Am/AppletAE/AllSystemAppletProxiesService/SystemAppletProxy/ICommonStateGetter.cs
@@ -21,6 +21,7 @@ namespace Ryujinx.HLE.HOS.Services.Am.AppletAE.AllSystemAppletProxiesService.Sys
 #pragma warning restore CS0414
         private int  _messageEventHandle;
         private int  _displayResolutionChangedEventHandle;
+        private int _aquiredSleeplockHandle;
 
         public ICommonStateGetter(ServiceCtx context)
         {
@@ -116,6 +117,30 @@ namespace Ryujinx.HLE.HOS.Services.Am.AppletAE.AllSystemAppletProxiesService.Sys
             return ResultCode.Success;
         }
 
+        [CommandHipc(10)]
+        public ResultCode RequestToAquireSleeplock()
+        {
+            return ResultCode.Success;
+        }
+
+        [CommandHipc(13)]
+        public ResultCode GetAcquiredSleepLockEvent(ServiceCtx context)
+        {
+            if (_aquiredSleeplockHandle == 0)
+            {
+                if (context.Process.HandleTable.GenerateHandle(context.Device.System.AquireSleeplockEvent.ReadableEvent, out _aquiredSleeplockHandle) != KernelResult.Success)
+                {
+                    throw new InvalidOperationException("Out of handles!");
+                }
+            }
+
+            context.Response.HandleDesc = IpcHandleDesc.MakeCopy(_aquiredSleeplockHandle);
+
+            Logger.Stub?.PrintStub(LogClass.ServiceAm);
+
+            return ResultCode.Success;
+        }
+
         [CommandHipc(50)] // 3.0.0+
         // IsVrModeEnabled() -> b8
         public ResultCode IsVrModeEnabled(ServiceCtx context)
diff --git a/Ryujinx.HLE/HOS/Services/Am/AppletAE/IAllSystemAppletProxiesService.cs b/Ryujinx.HLE/HOS/Services/Am/AppletAE/IAllSystemAppletProxiesService.cs
index 926234f5..9de09dcb 100644
--- a/Ryujinx.HLE/HOS/Services/Am/AppletAE/IAllSystemAppletProxiesService.cs
+++ b/Ryujinx.HLE/HOS/Services/Am/AppletAE/IAllSystemAppletProxiesService.cs
@@ -1,3 +1,4 @@
+using Ryujinx.Common.Logging;
 using Ryujinx.HLE.HOS.Services.Am.AppletAE.AllSystemAppletProxiesService;
 
 namespace Ryujinx.HLE.HOS.Services.Am.AppletAE
@@ -7,6 +8,13 @@ namespace Ryujinx.HLE.HOS.Services.Am.AppletAE
     {
         public IAllSystemAppletProxiesService(ServiceCtx context) { }
 
+        [CommandHipc(40)]
+        public ResultCode shouldNotExist(ServiceCtx context)
+        {
+            Logger.Warning?.Print(LogClass.ServiceAm, "IAllSystemAppletProxiesService:40 was called. This *technically* shouldn't exist.");
+            return ResultCode.Success;
+        }
+
         [CommandHipc(100)]
         // OpenSystemAppletProxy(u64, pid, handle<copy>) -> object<nn::am::service::ISystemAppletProxy>
         public ResultCode OpenSystemAppletProxy(ServiceCtx context)
diff --git a/Ryujinx.HLE/HOS/Services/Am/AppletOE/ApplicationProxyService/ApplicationProxy/IApplicationFunctions.cs b/Ryujinx.HLE/HOS/Services/Am/AppletOE/ApplicationProxyService/ApplicationProxy/IApplicationFunctions.cs
index 3ea956aa..f375b207 100644
--- a/Ryujinx.HLE/HOS/Services/Am/AppletOE/ApplicationProxyService/ApplicationProxy/IApplicationFunctions.cs
+++ b/Ryujinx.HLE/HOS/Services/Am/AppletOE/ApplicationProxyService/ApplicationProxy/IApplicationFunctions.cs
@@ -318,6 +318,20 @@ namespace Ryujinx.HLE.HOS.Services.Am.AppletOE.ApplicationProxyService.Applicati
             return ResultCode.Success;
         }
 
+        [CommandHipc(70)]
+        public ResultCode RequestToShutdown()
+        {
+            //yesn't
+            return ResultCode.Success;
+        }
+
+        [CommandHipc(71)]
+        public ResultCode RequestToReboot()
+        {
+            //yesn't
+            return ResultCode.Success;
+        }
+
         [CommandHipc(90)] // 4.0.0+
         // EnableApplicationCrashReport(u8)
         public ResultCode EnableApplicationCrashReport(ServiceCtx context)
diff --git a/Ryujinx.HLE/HOS/Services/Fatal/IService.cs b/Ryujinx.HLE/HOS/Services/Fatal/IService.cs
index 692d2b0b..7c9bf5f1 100644
--- a/Ryujinx.HLE/HOS/Services/Fatal/IService.cs
+++ b/Ryujinx.HLE/HOS/Services/Fatal/IService.cs
@@ -4,5 +4,13 @@
     class IService : IpcService
     {
         public IService(ServiceCtx context) { }
+
+        [CommandHipc(2)]
+        public ResultCode ThrowFatalWithCPUContext(ServiceCtx context)
+        {
+            //Well well well, we've made *quite* the mess now, haven't we?
+            //eh, let it burn anyways.
+            return ResultCode.Success;
+        }
     }
 }
\ No newline at end of file
diff --git a/Ryujinx.HLE/HOS/Services/IpcService.cs b/Ryujinx.HLE/HOS/Services/IpcService.cs
index e3306071..7b8b73a6 100644
--- a/Ryujinx.HLE/HOS/Services/IpcService.cs
+++ b/Ryujinx.HLE/HOS/Services/IpcService.cs
@@ -118,8 +118,16 @@ namespace Ryujinx.HLE.HOS.Services
                 if (serviceExists)
                 {
                     Logger.Debug?.Print(LogClass.KernelIpc, $"{service.GetType().Name}: {processRequest.Name}");
-
-                    result = (ResultCode)processRequest.Invoke(service, new object[] { context });
+                    try
+                    {
+                        result = (ResultCode)processRequest.Invoke(service, new object[] { context });
+                    }
+                    catch(Exception e)
+                    {
+                        Logger.Error?.Print(LogClass.KernelIpc, $"Error happened: {e}. Ignoring it.");
+                        result = ResultCode.Success;
+                    }
+                    //result = (ResultCode)processRequest.Invoke(service, context);
                 }
                 else
                 {
diff --git a/Ryujinx.HLE/HOS/Services/Nifm/StaticService/IGeneralService.cs b/Ryujinx.HLE/HOS/Services/Nifm/StaticService/IGeneralService.cs
index 2296838e..d1519eef 100644
--- a/Ryujinx.HLE/HOS/Services/Nifm/StaticService/IGeneralService.cs
+++ b/Ryujinx.HLE/HOS/Services/Nifm/StaticService/IGeneralService.cs
@@ -158,6 +158,13 @@ namespace Ryujinx.HLE.HOS.Services.Nifm.StaticService
             return ResultCode.Success;
         }
 
+        [CommandHipc(26)]
+        public ResultCode SetExclusiveClient(ServiceCtx context)
+        {
+            //stub, for now
+            return ResultCode.Success;
+        }
+
         private (IPInterfaceProperties, UnicastIPAddressInformation) GetLocalInterface()
         {
             if (!NetworkInterface.GetIsNetworkAvailable())
diff --git a/Ryujinx.HLE/HOS/Services/Nn/gpio/IManager.cs b/Ryujinx.HLE/HOS/Services/Nn/gpio/IManager.cs
new file mode 100644
index 00000000..c00853ba
--- /dev/null
+++ b/Ryujinx.HLE/HOS/Services/Nn/gpio/IManager.cs
@@ -0,0 +1,17 @@
+ï»¿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Ryujinx.HLE.HOS.Services.Nn.gpio
+{
+    [Service("gpio")]
+    class IManager : IpcService
+    {
+        public IManager(ServiceCtx context) { }
+
+        
+
+    }
+}
diff --git a/Ryujinx.HLE/HOS/Services/Npns/INpnsSystem.cs b/Ryujinx.HLE/HOS/Services/Npns/INpnsSystem.cs
index fd8ccfb5..48713fc5 100644
--- a/Ryujinx.HLE/HOS/Services/Npns/INpnsSystem.cs
+++ b/Ryujinx.HLE/HOS/Services/Npns/INpnsSystem.cs
@@ -4,5 +4,12 @@
     class INpnsSystem : IpcService
     {
         public INpnsSystem(ServiceCtx context) { }
+
+        [CommandHipc(101)]
+        //https://reswitched.github.io/SwIPC/ifaces.html#nn::npns::INpnsSystem(101)
+        public ResultCode Unknown101(ServiceCtx context)
+        {
+            return ResultCode.Success;
+        }
     }
 }
\ No newline at end of file
diff --git a/Ryujinx.HLE/HOS/Services/Ns/IApplicationManagerInterface.cs b/Ryujinx.HLE/HOS/Services/Ns/IApplicationManagerInterface.cs
index d3a89178..21997c83 100644
--- a/Ryujinx.HLE/HOS/Services/Ns/IApplicationManagerInterface.cs
+++ b/Ryujinx.HLE/HOS/Services/Ns/IApplicationManagerInterface.cs
@@ -20,5 +20,37 @@
 
             return ResultCode.Success;
         }
+
+        public struct ApplicationRecord {
+            ulong ApplicationID;
+            byte Type;
+            byte Unknown1;
+            byte unknown2_1;
+            byte unknown2_2;
+            byte unknown2_3;
+            byte unknown2_4;
+            byte unknown2_5;
+            byte unknown2_6;
+            byte Unknown3;
+            byte unknown4_1;
+            byte unknown4_2;
+            byte unknown4_3;
+            byte unknown4_4;
+            byte unknown4_5;
+            byte unknown4_6;
+            byte unknown4_7;
+        }
+
+
+        [CommandHipc(0)]
+        public ResultCode ListApplicationRecord(ServiceCtx context)
+        {
+            //TODO if we want to make this *actually* work: read the input and do stuff:tm:
+            //for now, just return  and be done with it
+            context.ResponseData.Write(0);
+
+            //no matter what, we will claim success for the sake of getting this through.
+            return ResultCode.Success;
+        }
     }
 }
\ No newline at end of file
diff --git a/Ryujinx.HLE/HOS/Services/Ns/IContentManagementInterface.cs b/Ryujinx.HLE/HOS/Services/Ns/IContentManagementInterface.cs
new file mode 100644
index 00000000..178afa57
--- /dev/null
+++ b/Ryujinx.HLE/HOS/Services/Ns/IContentManagementInterface.cs
@@ -0,0 +1,20 @@
+ï»¿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Ryujinx.HLE.HOS.Services.Ns
+{
+    class IContentManagementInterface : IpcService
+    {
+        public IContentManagementInterface(ServiceCtx context) { }
+
+        [CommandHipc(43)]
+        public ResultCode CheckSdCardMountStatus(ServiceCtx context)
+        {
+            //returns nothing, so does nothing.
+            return ResultCode.Success;
+        }
+    }
+}
diff --git a/Ryujinx.HLE/HOS/Services/Ns/IServiceGetterInterface.cs b/Ryujinx.HLE/HOS/Services/Ns/IServiceGetterInterface.cs
index 1d7fa2c3..ff4cad13 100644
--- a/Ryujinx.HLE/HOS/Services/Ns/IServiceGetterInterface.cs
+++ b/Ryujinx.HLE/HOS/Services/Ns/IServiceGetterInterface.cs
@@ -18,6 +18,13 @@ namespace Ryujinx.HLE.HOS.Services.Ns
             return ResultCode.Success;
         }
 
+        [CommandHipc(7998)]
+        public ResultCode GetContentManagementInterface(ServiceCtx context)
+        {
+            MakeObject(context, new IContentManagementInterface(context));
+            return ResultCode.Success;
+        }
+
         [CommandHipc(7989)]
         // GetReadOnlyApplicationControlDataInterface() -> object<nn::ns::detail::IReadOnlyApplicationControlDataInterface>
         public ResultCode GetReadOnlyApplicationControlDataInterface(ServiceCtx context)
diff --git a/Ryujinx.HLE/HOS/Services/Nv/INvDrvServices.cs b/Ryujinx.HLE/HOS/Services/Nv/INvDrvServices.cs
index 9efe206f..a050d60d 100644
--- a/Ryujinx.HLE/HOS/Services/Nv/INvDrvServices.cs
+++ b/Ryujinx.HLE/HOS/Services/Nv/INvDrvServices.cs
@@ -259,13 +259,15 @@ namespace Ryujinx.HLE.HOS.Services.Nv
                 if (errorCode == NvResult.Success)
                 {
                     errorCode = GetDeviceFileFromFd(fd, out NvDeviceFile deviceFile);
-
                     if (errorCode == NvResult.Success)
                     {
                         NvInternalResult internalResult = deviceFile.Ioctl(ioctlCommand, arguments);
 
                         if (internalResult == NvInternalResult.NotImplemented)
                         {
+                          //  Console.WriteLine("[Hacky/WARN]: Just ignored an unimplemented exception deliberately. Here be dragons!");
+                           // Console.WriteLine($"Command was {ioctlCommand}, args were {arguments.ToString()}.");
+                          //  internalResult = NvInternalResult.Success;
                             throw new NvIoctlNotImplementedException(context, deviceFile, ioctlCommand);
                         }
 
@@ -428,7 +430,8 @@ namespace Ryujinx.HLE.HOS.Services.Nv
         // ForceSetClientPid(u64) -> u32 error_code
         public ResultCode ForceSetClientPid(ServiceCtx context)
         {
-            throw new ServiceNotImplementedException(this, context, false);
+            return ResultCode.Success;
+            //throw new ServiceNotImplementedException(this, context, false);
         }
 
         [CommandHipc(8)]
diff --git a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvDeviceFile.cs b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvDeviceFile.cs
index f143f6d1..73fe1870 100644
--- a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvDeviceFile.cs
+++ b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvDeviceFile.cs
@@ -58,7 +58,7 @@ namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices
 
         private static NvInternalResult PrintResult(MethodInfo info, NvInternalResult result)
         {
-            Logger.Debug?.Print(LogClass.ServiceNv, $"{info.Name} returned result {result}");
+            Logger.Info?.Print(LogClass.ServiceNv, $"{info.Name} returned result {result}");
 
             return result;
         }
diff --git a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/NvHostAsGpuDeviceFile.cs b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/NvHostAsGpuDeviceFile.cs
index b3be6fba..4bdfdf51 100644
--- a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/NvHostAsGpuDeviceFile.cs
+++ b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/NvHostAsGpuDeviceFile.cs
@@ -42,6 +42,9 @@ namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvHostAsGpu
                     case 0x06:
                         result = CallIoctlMethod<MapBufferExArguments>(MapBufferEx, arguments);
                         break;
+                    case 0x07:
+                        Logger.Info?.Print(LogClass.ServiceNv, $"Number 0x07 triggered");
+                        break;
                     case 0x08:
                         result = CallIoctlMethod<GetVaRegionsArguments>(GetVaRegions, arguments);
                         break;
@@ -51,6 +54,9 @@ namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvHostAsGpu
                     case 0x14:
                         result = CallIoctlMethod<RemapArguments>(Remap, arguments);
                         break;
+                    default:
+                        Logger.Error?.Print(LogClass.ServiceNv, $"Command number {command.Number} is missing from NvHostCtrlGpuDeviceFile.");
+                        break;
                 }
             }
 
@@ -75,6 +81,13 @@ namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvHostAsGpu
             return result;
         }
 
+        private NvInternalResult AllocAddressSpace(ref AllocASArguments arguments)
+        {
+           // ulong size = 
+
+            return NvInternalResult.Success;
+        }
+
         private NvInternalResult BindChannel(ref BindChannelArguments arguments)
         {
             var channelDeviceFile = INvDrvServices.DeviceFileIdRegistry.GetData<NvHostChannelDeviceFile>(arguments.Fd);
diff --git a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/Types/AllocASArguments.cs b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/Types/AllocASArguments.cs
new file mode 100644
index 00000000..e49937a1
--- /dev/null
+++ b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostAsGpu/Types/AllocASArguments.cs
@@ -0,0 +1,18 @@
+ï»¿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Runtime.InteropServices;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvHostAsGpu.Types
+{
+    //from https://switchbrew.org/wiki/NV_services#NVGPU_AS_IOCTL_ALLOC_AS
+    [StructLayout(LayoutKind.Sequential)]
+    struct AllocASArguments
+    {
+        UInt32 big_page_size;
+        int as_fd; //ignored
+        ulong reserved; //ignored
+    }
+}
diff --git a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostCtrl/NvHostCtrlDeviceFile.cs b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostCtrl/NvHostCtrlDeviceFile.cs
index f0e5634e..40be7138 100644
--- a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostCtrl/NvHostCtrlDeviceFile.cs
+++ b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostCtrl/NvHostCtrlDeviceFile.cs
@@ -39,6 +39,7 @@ namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvHostCtrl
         public override NvInternalResult Ioctl(NvIoctl command, Span<byte> arguments)
         {
             NvInternalResult result = NvInternalResult.NotImplemented;
+            //Console.WriteLine("HostCtrlDeviceFile");
 
             if (command.Type == NvIoctl.NvHostCustomMagic)
             {
diff --git a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostCtrlGpu/NvHostCtrlGpuDeviceFile.cs b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostCtrlGpu/NvHostCtrlGpuDeviceFile.cs
index 840d95b9..e5f3e628 100644
--- a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostCtrlGpu/NvHostCtrlGpuDeviceFile.cs
+++ b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvHostCtrlGpu/NvHostCtrlGpuDeviceFile.cs
@@ -29,6 +29,7 @@ namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvHostCtrlGpu
 
         public override NvInternalResult Ioctl(NvIoctl command, Span<byte> arguments)
         {
+            //Console.WriteLine("HostCtrlGPUFile | "+command.Number);
             NvInternalResult result = NvInternalResult.NotImplemented;
 
             if (command.Type == NvIoctl.NvGpuMagic)
@@ -56,6 +57,7 @@ namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvHostCtrlGpu
                     case 0x1c:
                         result = CallIoctlMethod<GetGpuTimeArguments>(GetGpuTime, arguments);
                         break;
+                 
                 }
             }
 
diff --git a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvMap/NvMapDeviceFile.cs b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvMap/NvMapDeviceFile.cs
index 7f6f6068..d2305ebe 100644
--- a/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvMap/NvMapDeviceFile.cs
+++ b/Ryujinx.HLE/HOS/Services/Nv/NvDrvServices/NvMap/NvMapDeviceFile.cs
@@ -22,6 +22,7 @@ namespace Ryujinx.HLE.HOS.Services.Nv.NvDrvServices.NvMap
 
         public override NvInternalResult Ioctl(NvIoctl command, Span<byte> arguments)
         {
+           // Console.WriteLine("MapDeviceFile");
             NvInternalResult result = NvInternalResult.NotImplemented;
 
             if (command.Type == NvIoctl.NvMapCustomMagic)
diff --git a/Ryujinx.HLE/HOS/Services/Prepo/IPrepoService.cs b/Ryujinx.HLE/HOS/Services/Prepo/IPrepoService.cs
index 3fa1182d..e78398a8 100644
--- a/Ryujinx.HLE/HOS/Services/Prepo/IPrepoService.cs
+++ b/Ryujinx.HLE/HOS/Services/Prepo/IPrepoService.cs
@@ -25,6 +25,20 @@ namespace Ryujinx.HLE.HOS.Services.Prepo
             _permission = permission;
         }
 
+        [CommandHipc(40100)]
+        public ResultCode IsUserAgreementCheckEnabled(ServiceCtx context)
+        {
+            context.ResponseData.Write(true);
+            return ResultCode.Success;
+        }
+        [CommandHipc(40101)]
+        public ResultCode SetUserAgreementCheckEnabled(ServiceCtx context)
+        {
+            //who cares?
+            return ResultCode.Success;
+        }
+
+
         [CommandHipc(10100)] // 1.0.0-5.1.0
         [CommandHipc(10102)] // 6.0.0-9.2.0
         [CommandHipc(10104)] // 10.0.0+
diff --git a/Ryujinx.HLE/HOS/Services/Ptm/Fan/IController.cs b/Ryujinx.HLE/HOS/Services/Ptm/Fan/IController.cs
new file mode 100644
index 00000000..bf74a442
--- /dev/null
+++ b/Ryujinx.HLE/HOS/Services/Ptm/Fan/IController.cs
@@ -0,0 +1,12 @@
+ï»¿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Ryujinx.HLE.HOS.Services.Ptm.Fan
+{
+    class IController : IpcService
+    {
+    }
+}
diff --git a/Ryujinx.HLE/HOS/Services/Ptm/Fan/IManager.cs b/Ryujinx.HLE/HOS/Services/Ptm/Fan/IManager.cs
index e2fe2235..853c1fcd 100644
--- a/Ryujinx.HLE/HOS/Services/Ptm/Fan/IManager.cs
+++ b/Ryujinx.HLE/HOS/Services/Ptm/Fan/IManager.cs
@@ -4,5 +4,13 @@
     class IManager : IpcService
     {
         public IManager(ServiceCtx context) { }
+
+        [CommandHipc(0)]
+        public ResultCode unknown0(ServiceCtx context)
+        {
+            MakeObject(context, new Services.Ptm.Fan.IController());
+            //  context.ResponseData.Write(new Services.Ptm.Fan.IController());
+            return ResultCode.Success;
+        }
     }
 }
\ No newline at end of file
diff --git a/Ryujinx.HLE/HOS/Services/Ptm/Psm/IPsmServer.cs b/Ryujinx.HLE/HOS/Services/Ptm/Psm/IPsmServer.cs
index 96a503d4..e401b044 100644
--- a/Ryujinx.HLE/HOS/Services/Ptm/Psm/IPsmServer.cs
+++ b/Ryujinx.HLE/HOS/Services/Ptm/Psm/IPsmServer.cs
@@ -41,5 +41,12 @@ namespace Ryujinx.HLE.HOS.Services.Ptm.Psm
 
             return ResultCode.Success;
         }
+
+        [CommandHipc(13)]
+        public ResultCode GetBatteryRawPercentage(ServiceCtx context)
+        {
+            context.ResponseData.Write(1.0d);
+            return ResultCode.Success;
+        }
     }
 }
\ No newline at end of file
diff --git a/Ryujinx.HLE/HOS/Services/Ptm/Tc/IManager.cs b/Ryujinx.HLE/HOS/Services/Ptm/Tc/IManager.cs
index 1daa4f5e..5b40724e 100644
--- a/Ryujinx.HLE/HOS/Services/Ptm/Tc/IManager.cs
+++ b/Ryujinx.HLE/HOS/Services/Ptm/Tc/IManager.cs
@@ -4,5 +4,12 @@
     class IManager : IpcService
     {
         public IManager(ServiceCtx context) { }
+
+        [CommandHipc(8)]
+        public ResultCode Unknown8(ServiceCtx context)
+        {
+            context.ResponseData.Write(false); //it says it returns an unknown<1>, so lets start with 1 byte.
+            return ResultCode.Success;
+        }
     }
 }
\ No newline at end of file
diff --git a/Ryujinx.HLE/HOS/Services/Settings/IFactorySettingsServer.cs b/Ryujinx.HLE/HOS/Services/Settings/IFactorySettingsServer.cs
index 4dd344f8..9b878f82 100644
--- a/Ryujinx.HLE/HOS/Services/Settings/IFactorySettingsServer.cs
+++ b/Ryujinx.HLE/HOS/Services/Settings/IFactorySettingsServer.cs
@@ -4,5 +4,12 @@
     class IFactorySettingsServer : IpcService
     {
         public IFactorySettingsServer(ServiceCtx context) { }
+
+        [CommandHipc(1)]
+        public ResultCode GetConfigurationId1(ServiceCtx context)
+        {
+            context.ResponseData.Write(new byte[29]);
+            return ResultCode.Success;
+        }
     }
 }
\ No newline at end of file
diff --git a/Ryujinx.HLE/HOS/Services/Settings/ISettingsServer.cs b/Ryujinx.HLE/HOS/Services/Settings/ISettingsServer.cs
index 703f6163..cbcb44d6 100644
--- a/Ryujinx.HLE/HOS/Services/Settings/ISettingsServer.cs
+++ b/Ryujinx.HLE/HOS/Services/Settings/ISettingsServer.cs
@@ -118,6 +118,8 @@ namespace Ryujinx.HLE.HOS.Services.Settings
             return GetKeyCodeMapImpl(context, 2);
         }
 
+      
+
         [CommandHipc(11)] // 10.1.0+
         // GetDeviceNickName() -> buffer<nn::settings::system::DeviceNickName, 0x16>
         public ResultCode GetDeviceNickName(ServiceCtx context)
diff --git a/Ryujinx.HLE/HOS/Services/Settings/ISystemSettingsServer.cs b/Ryujinx.HLE/HOS/Services/Settings/ISystemSettingsServer.cs
index 1a437289..7340a8f6 100644
--- a/Ryujinx.HLE/HOS/Services/Settings/ISystemSettingsServer.cs
+++ b/Ryujinx.HLE/HOS/Services/Settings/ISystemSettingsServer.cs
@@ -26,6 +26,19 @@ namespace Ryujinx.HLE.HOS.Services.Settings
             return GetFirmwareVersion2(context);
         }
 
+        [CommandHipc(47)]
+        // GetQuestFlag() -> bool
+        public ResultCode GetQuestFlag(ServiceCtx context)
+        {
+            Logger.Warning?.Print(LogClass.Service, $"GetQuestFlag was called. Returning true [This was done soley for QCIT]");
+            context.ResponseData.Write(true);
+
+            Logger.Stub?.PrintStub(LogClass.ServiceSet);
+
+            return ResultCode.Success;
+        }
+
+
         [CommandHipc(4)]
         // GetFirmwareVersion2() -> buffer<nn::settings::system::FirmwareVersion, 0x1a, 0x100>
         public ResultCode GetFirmwareVersion2(ServiceCtx context)
@@ -234,6 +247,13 @@ namespace Ryujinx.HLE.HOS.Services.Settings
             return ResultCode.Success;
         }
 
+        [CommandHipc(68)]
+        public ResultCode GetSerialNumber(ServiceCtx context)
+        {
+            context.ResponseData.Write(new byte[17]);
+            return ResultCode.Success;
+        }
+
         [CommandHipc(77)]
         // GetDeviceNickName() -> buffer<nn::settings::system::DeviceNickName, 0x16>
         public ResultCode GetDeviceNickName(ServiceCtx context)
diff --git a/Ryujinx.HLE/HOS/Services/Settings/NxSettings.cs b/Ryujinx.HLE/HOS/Services/Settings/NxSettings.cs
index ca3853e8..eb71536b 100644
--- a/Ryujinx.HLE/HOS/Services/Settings/NxSettings.cs
+++ b/Ryujinx.HLE/HOS/Services/Settings/NxSettings.cs
@@ -7,6 +7,7 @@ namespace Ryujinx.HLE.HOS.Services.Settings
 		// Generated automatically from a Switch 3.0 config file (Tid: 0100000000000818).
 		public static Dictionary<string, object> Settings = new Dictionary<string, object>
 		{
+            { "systemupdate!enable_network_service", false },
 			{ "account!na_required_for_network_service", true },
 			{ "account.daemon!background_awaking_periodicity", 10800 },
 			{ "account.daemon!schedule_periodicity", 3600 },
-- 
2.35.1.windows.2

